<resources>
    <string name="app_name">HacelaApp</string>

    <!--facebook-->
    <string name="facebook_app_id">179544296012408</string>
    <string name="fb_login_protocol_scheme">fb179544296012408</string>

    <!--twitter-->
    <string name="twitter_consumer_key" translatable="false">pTpB7cAYwf97ZvHeZNhiC2fjs</string>
    <string name="twitter_consumer_secret" translatable="false">5NA95Doqga0JKGPIwUr7HN65kadYVHB2dEDNvsVCDPLRFavZ08</string>


    <string name="sign_up_with">Sign up with</string>
    <string name="sign_up_with_facebook">Sign up with facebook</string>
    <string name="sign_up_with_google">Sign up with Google</string>
    <string name="sign_in_with_facebook">Sign in with Facebook</string>
    <string name="sign_in_with_google">Sign in with Google</string>
    <string name="sign_up_with_twitter">Sign up with Twitter</string>
    <string name="sign_in_with_twitter">Sign in with Twitter</string>
    <string name="sign_up_ex">Sign Up!</string>
    <string name="sign_out">Sign out</string>

    <string name="or">OR</string>
    <string name="image_default_content_description">image default content description</string>
    <string name="welcome">Welcome</string>
    <string name="login_with">Login with</string>
    <string name="password">Password</string>
    <string name="forgot_password">Forgot Password?</string>
    <string name="display_name">Display Name</string>
    <string name="phone_number">Phone Number</string>
    <string name="email_or_phone_number">Email or Phone Number</string>
    <string name="email">Email</string>
    <string name="don_t_have_an_account">Don\'t have an account?</string>

    <!--bottom nav titles-->
    <string name="bottomnav_title_0">Profile</string>
    <string name="bottomnav_title_1">Home</string>
    <string name="bottomnav_title_2">Account</string>
    <string name="bottomnav_title_3">Chat</string>

    <string name="toremove">Of course, some code must have been written to govern the behaviors of the widgets and Views in our samples above. The CoordinatorLayout automatically does all this already. However, you might want to define your own reactions and behaviors, rather than use the default and standard behaviors. It is remarkably easy to do. The complexity lies in how unique a behavior you want, and not in implementing a behavior. Our custom behavior is really simple. From the FabFollowsWidget sample above, we want the CircleImageView to grow larger as the user scrolls to the end of the Cards. To define a custom behavior, we create a CustomBehavior class, that inherits from CoordinatorLayout.behavior class. We want the View that uses our behavior to have itâ€™s layout depend on another View. To achieve this, we override the layoutDependsOn method specifying what class of Views we want to watch out for. We also override the onDependentViewChanged method, which specifies what should happen when the dependent view has changed. In the sample below, we check for the position of the Toolbar relative to the CircleImageView, and increase the size of the CircleImageView correspondingly using setScale(). The layout is identical to the FabFollowsWidget layout above, except for the inclusion of an Toolbar at the buttom of the screen. There is really no reason why we chose a Toolbar, and it could be anything you want. The Toolbar is anchored to the last CardView. Recall that in the CustomBehavior class above, the CircleImageView layout depends on a Toolbar. When the Toolbar moves with the last CardView (cardView3) the CircleImageView begins to grow.</string>
</resources>
